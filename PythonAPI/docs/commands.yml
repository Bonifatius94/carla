---
- module_name: command

  classes:
  - class_name: Response
    # - DESCRIPTION ------------------------
    doc: >
      Execution result of a command, contains either an error string or an
      actor ID, depending on whether or not the command succeeded. See carla.Client.apply_batch_sync
    # - PROPERTIES -------------------------
    instance_variables:
    - var_name: actor_id
      type: int
      doc: >
        Actor affected by the command
    - var_name: error
      type: str
      doc: >
    # - METHODS ----------------------------
    methods:
    - def_name: has_error
      params:
      doc: >
<<<<<<< HEAD
=======
        Returns <b>True</b> if the command execution fails, and <b>False</b> if it was successful. 
>>>>>>> 4dc4cb81853670d83ee067ae747c8c851926dacd
    # --------------------------------------

  - class_name: SpawnActor
    # - DESCRIPTION ------------------------
    doc: >
      Spawn an actor into the world based on the blueprint provided and the transform.
      If a parent is provided, the actor is attached to parent.
    # - PROPERTIES -------------------------
    instance_variables:
    - var_name: transform
      type: carla.Transform
      doc: >
        Transform to be applied
    - var_name: parent_id
      type: int
      doc: >
        Parent's actor id
    # - METHODS ----------------------------
    methods:
    - def_name: __init__
      doc: >
    # --------------------------------------
    - def_name: __init__
      params:
      - param_name: blueprint
        type: carla.ActorBlueprint
      - param_name: transform
        type: carla.Transform
      doc: >
    # --------------------------------------
    - def_name: __init__
      params:
      - param_name: blueprint
        type: carla.ActorBlueprint
      - param_name: transform
        type: carla.Transform
      - param_name: parent
        type: carla.Actor or int     
      doc: >
    # --------------------------------------
    - def_name: then
      params:
      - param_name: command
        type: any carla Command
        doc: > 
          a Carla command.
      doc: >
        Link another command to be executed right after.
    # --------------------------------------

  - class_name: DestroyActor
    # - DESCRIPTION ------------------------
    doc: >
<<<<<<< HEAD
      Tell the simulator to destroy this Actor, and return whether the actor was
      successfully destroyed. It has no effect if the Actor was already
      successfully destroyed.
=======
      Command adaptation of **<font color="#7fb800">destroy()</font>** in carla.Actor that tells the simulator to destroy this actor. It has no effect if the actor was already destroyed. When executed with **<font color="#7fb800">apply_batch_sync()</font>** in carla.Client there will be a <b>command.Response</b> that will return a boolean stating whether the actor was successfully destroyed.
>>>>>>> 4dc4cb81853670d83ee067ae747c8c851926dacd
    # - PROPERTIES -------------------------
    instance_variables:
    - var_name: actor_id
      type: int
      doc: >
        Actor affected by the command
    # - METHODS ----------------------------
    methods:
    - def_name: __init__
      params:
      - param_name: actor
        type: carla.Actor or int
      doc: >
    # --------------------------------------

  - class_name: ApplyVehicleControl
    # - DESCRIPTION ------------------------
    doc: >
      Apply control to the vehicle.
    # - PROPERTIES -------------------------
    instance_variables:
    - var_name: actor_id
      type: int
      doc: >
        Vehicle actor affected by the command
    - var_name: control
      type: carla.VehicleControl
      doc: >
        Vehicle control to be applied
    # - METHODS ----------------------------
    methods:
    - def_name: __init__
      params:
      - param_name: actor
        type: carla.Actor or int
      - param_name: control
        type: carla.VehicleControl
      doc: >
    # --------------------------------------
  
  - class_name: ApplyWalkerControl
    # - DESCRIPTION ------------------------
    doc: >
      Apply control to the walker
    # - PROPERTIES -------------------------
    instance_variables:
    - var_name: actor_id
      type: int
      doc: >
        Walker actor affected by the command
    - var_name: control
      type: carla.VehicleControl
      doc: >
        Walker control to be applied
    # - METHODS ----------------------------
    methods:
    - def_name: __init__
      params:
      - param_name: actor
        type: carla.Actor or int
      - param_name: control
        type: carla.WalkerControl
      doc: >
    # --------------------------------------

  - class_name: ApplyTransform
    # - DESCRIPTION ------------------------
    doc: >
      Sets a new transform to the actor.
    # - PROPERTIES -------------------------
    instance_variables:
    - var_name: actor_id
      type: int
      doc: >
        Actor affected by the command
    - var_name: transform
      type: carla.Transform
      doc: >
        Transformation to be applied
    # - METHODS ----------------------------
    methods:
    - def_name: __init__
      params:
      - param_name: actor
        type: carla.Actor or int
      - param_name: transform
        type: carla.Transform
      doc: >
    # --------------------------------------

  - class_name: ApplyWalkerState
    # - DESCRIPTION ------------------------
    doc: >
      Apply a state to the walker actor
    # - PROPERTIES -------------------------
    instance_variables:
    - var_name: actor_id
      type: int
      doc: >
        Walker actor affected by the command
    - var_name: transform
      type: carla.Transform
      doc: >
        Transform to be applied
    - var_name: speed
      type: float
      doc: >
        Speed to be applied
    # - METHODS ----------------------------
    methods:
    - def_name: __init__
      params:
      - param_name: actor
        type: carla.Actor or int
      - param_name: transform
        type: carla.Transform
        doc: >
      - param_name: speed
        type: float
        doc: >
    # --------------------------------------

  - class_name: ApplyVelocity
    # - DESCRIPTION ------------------------
    doc: >
      Sets actor's velocity
    # - PROPERTIES -------------------------
    instance_variables:
    - var_name: actor_id
      type: int
      doc: >
        Actor affected by the command.
    - var_name: velocity
      type: carla.Vector3D
      doc: >
        The 3D velocity applied to the actor
    # - METHODS ----------------------------
    methods:
    - def_name: __init__
      params:
      - param_name: actor
        type: carla.Actor or int
      - param_name: velocity
        type: carla.Vector3D
      doc: >
    # --------------------------------------

  - class_name: ApplyAngularVelocity
    # - DESCRIPTION ------------------------
    doc: >
      Set the actor's angular velocity
    # - PROPERTIES -------------------------
    instance_variables:
    - var_name: actor_id
      type: int
      doc: >
        Actor affected by the command
    - var_name: angular_velocity
      type: carla.Vector3D
      doc: >
        The 3D angular velocity that will be applied to the actor
    # - METHODS ----------------------------
    methods:
    - def_name: __init__
      params:
      - param_name: actor
        type: carla.Actor or int
      - param_name: angular_velocity
        type: carla.Vector3D
      doc: >
    # --------------------------------------

  - class_name: ApplyImpulse
    # - DESCRIPTION ------------------------
    doc: >
      Adds impulse to the actor
    # - PROPERTIES -------------------------
    instance_variables:
    - var_name: actor_id
      type: int
      doc: >
        Actor affected by the command
    - var_name: impulse
      type: carla.Vector3D
      doc: >
        Impulse applied to the actor
    # - METHODS ----------------------------
    methods:
    - def_name: __init__
      params:
      - param_name: actor
        type: carla.Actor or int
      - param_name: impulse
        type: carla.Vector3D
      doc: >
    # --------------------------------------

  - class_name: ApplyAngularImpulse
    # - DESCRIPTION ------------------------
    doc: >
      Command adaptation of **<font color="#7fb800">add_angular_impulse()</font>** in carla.Actor. Adds angular impulse to an actor.  
    # - PROPERTIES -------------------------
    instance_variables:
    - var_name: actor_id
      type: int
      doc: >
        Actor affected by the command. 
    - var_name: impulse
      type: carla.Vector3D
      doc: >
        Angular impulse applied to the actor. Determines magnitude and global axis where it is applied.  
    # - METHODS ----------------------------
    methods:
    - def_name: __init__
      params:
      - param_name: actor
        type: carla.Actor or int
        doc: > 
          Actor or its ID to whom the command will be applied to. 
      - param_name: impulse
        type: carla.Vector3D
    # --------------------------------------

  - class_name: SetSimulatePhysics
    # - DESCRIPTION ------------------------
    doc: >
      Whether an actor will be affected by physics or not.
    # - PROPERTIES -------------------------
    instance_variables:
    - var_name: actor_id
      type: int
      doc: >
        Actor affected by the command
    - var_name: enabled
      type: bool
      doc: >
        If physics will affect the actor
    # - METHODS ----------------------------
    methods:
    - def_name: __init__
      params:
      - param_name: actor
        type: carla.Actor or int
      - param_name: enabled
        type: bool
      doc: >
    # --------------------------------------

  - class_name: SetAutopilot
    # - DESCRIPTION ------------------------
    doc: >
<<<<<<< HEAD
      Switch on/off vehicle's server-side autopilot
=======
      Command adaptation of **<font color="#7fb800">set_autopilot()</font>** in carla.Vehicle. Turns on/off the vehicle's autopilot mode.
>>>>>>> 4dc4cb81853670d83ee067ae747c8c851926dacd
    # - PROPERTIES -------------------------
    instance_variables:
    - var_name: actor_id
      type: int
      doc: >
        Actor that is affected by the command.
    - var_name: enabled
      type: bool
      doc: >
<<<<<<< HEAD
        If the autopilot is enabled or not.
=======
        If autopilot should be activated or not.
    - var_name: port
      type: uint16
      doc: >
        Port of the Traffic Manager where the vehicle is to be registered or unlisted. 
>>>>>>> 4dc4cb81853670d83ee067ae747c8c851926dacd
    # - METHODS ----------------------------
    methods:
    - def_name: __init__
      params:
      - param_name: actor
        type: carla.Actor or int
      - param_name: enabled
        type: bool
<<<<<<< HEAD
      doc: >
=======
      - param_name: port
        type: uint16
        default: 8000
        doc: >
          The Traffic Manager port where the vehicle is to be registered or unlisted. If __None__ is passed, it will consider a TM at default port `8000`. 
>>>>>>> 4dc4cb81853670d83ee067ae747c8c851926dacd
    # --------------------------------------
...
