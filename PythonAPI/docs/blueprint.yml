---
- module_name: carla

  # - CLASSES ------------------------------
  classes:
  - class_name: ActorAttributeType
    # - DESCRIPTION ------------------------
    doc: >
      Class that defines the type of attribute of a carla.ActorAttribute.
    # - PROPERTIES -------------------------
    instance_variables:
    - var_name: Bool
      doc: >
    - var_name: Int
      doc: >
    - var_name: Float
<<<<<<< HEAD
      doc: >
    - var_name: String
      doc: >
    - var_name: RGBColor
      doc: >
=======
    - var_name: String
    - var_name: RGBColor
>>>>>>> 4dc4cb81853670d83ee067ae747c8c851926dacd

  - class_name: Color
    # - DESCRIPTION ------------------------
    doc: >
      Class that defines a 32-bit BGRA color.
    # - PROPERTIES -------------------------
    instance_variables:
    - var_name: r
      type: int
      doc: >
        Red color (0-255)
    - var_name: g
      type: int
      doc: >
        Green color (0-255)
    - var_name: b
      type: int
      doc: >
        Blue color (0-255)
    - var_name: a
      type: int
      doc: >
        Alpha channel (0-255)
    # - METHODS ----------------------------
    methods:
    - def_name: __init__
      params:
      - param_name: r
        type: int
        default: 0
        doc: >
      - param_name: g
        type: int
        default: 0
        doc: >
      - param_name: b
        type: int
        default: 0
        doc: >
      - param_name: a
        type: int
        default: 255
        doc: >
      doc: >
        Client constructor
    # --------------------------------------
    - def_name: __eq__
      params:
      - param_name: other
        type: carla.Color
      doc: >
    # --------------------------------------
    - def_name: __ne__
      params:
      - param_name: other
        type: carla.Color
      doc: >
    # --------------------------------------
    - def_name: __str__
      doc: >
    # --------------------------------------

  - class_name: ActorAttribute
    # - DESCRIPTION ------------------------
    doc: >
      Class that defines an attribute of a carla.ActorBlueprint.
    # - PROPERTIES -------------------------
    instance_variables:
    - var_name: id
      type: str
      doc: >
<<<<<<< HEAD
        The attribute's identifier
    - var_name: type
      type: carla.ActorAttributeType
      doc: >
        The attribute parameter type
    - var_name: recommended_values
      type: list(str)
      doc: >
        List of recommended values that the attribute may have.
    - var_name: is_modifiable
      type: bool
      doc: >
        True if the attribute is modifiable.
=======
        The attribute's name and identifier in the library. 
    - var_name: is_modifiable
      type: bool
      doc: >
        It is <b>True</b> if the attribute's value can be modified.
    - var_name: recommended_values
      type: list(str)
      doc: >
        A list of values suggested by those who designed the blueprint. 
    - var_name: type
      type: carla.ActorAttributeType
      doc: >
        The attribute's parameter type.
>>>>>>> 4dc4cb81853670d83ee067ae747c8c851926dacd
    # - METHODS ----------------------------
    methods:
    - def_name: as_bool
      doc: >
    # --------------------------------------
<<<<<<< HEAD
    - def_name: as_int
      doc: >
    # --------------------------------------
=======
>>>>>>> 4dc4cb81853670d83ee067ae747c8c851926dacd
    - def_name: as_float
      doc: >
    # --------------------------------------
    - def_name: as_int
      doc: >
        Reads the attribute as int. 
    # --------------------------------------
    - def_name: as_str
      doc: >
<<<<<<< HEAD
    # --------------------------------------
    - def_name: as_color
      doc: >
=======
        Reads the attribute as string. 
    # --------------------------------------
    - def_name: __bool__
    # --------------------------------------
    - def_name: __float__
    # --------------------------------------
    - def_name: __int__
    # --------------------------------------
    - def_name: __str__
>>>>>>> 4dc4cb81853670d83ee067ae747c8c851926dacd
    # --------------------------------------
    - def_name: __eq__
      params:
      - param_name: other
        type: bool / int / float / str / carla.Color / carla.ActorAttribute
      doc: >
    # --------------------------------------
    - def_name: __ne__
      params:
      - param_name: other
        type: bool / int / float / str / carla.Color / carla.ActorAttribute
      doc: >
    # --------------------------------------
    - def_name: __nonzero__
      doc: >
    # --------------------------------------
    - def_name: __bool__
      doc: >
    # --------------------------------------
    - def_name: __int__
      doc: >
    # --------------------------------------
    - def_name: __float__
      doc: >
    # --------------------------------------
    - def_name: __str__
      doc: >
    # --------------------------------------
    - def_name: __str__
      doc: >
    # --------------------------------------

  - class_name: ActorBlueprint
    # - DESCRIPTION ------------------------
    doc: >
      Class that contains all the necessary information for spawning an Actor.
    # - PROPERTIES -------------------------
    instance_variables:
    - var_name: id
      type: str
      doc: >
        Actor blueprint identifier, e.g. `walker.pedestrian.0001`.
    - var_name: tags
      type: list(str)
      doc: >
        List of tags of an actor blueprint e.g. `['0001', 'pedestrian', 'walker']`
    # - METHODS ----------------------------
    methods:
<<<<<<< HEAD
=======
    - def_name: has_attribute
      return: bool
      params:
      - param_name: id
        type: str
        doc: >
          e.g. `gender` would return **True** for pedestrians' blueprints. 
      doc: >
        Returns <b>True</b> if the blueprint contains the attribute `id`. 
    # --------------------------------------
>>>>>>> 4dc4cb81853670d83ee067ae747c8c851926dacd
    - def_name: has_tag
      return: bool
      params:
      - param_name: tag
        type: str
        doc: >
          e.g. 'walker'
      doc: >
        Returns `true` if an actor blueprint has the tag.
    # --------------------------------------
    - def_name: match_tags
      return: bool
      params:
      - param_name: wildcard_pattern
        type: str
      doc: >
        Test if any of the flags or id matches wildcard_pattern.
      note: > 
        The wildcard_pattern follows Unix shell-style wildcards.
    # --------------------------------------
    - def_name: has_attribute
      return: bool
      params:
      - param_name: id
        type: str
        doc: >
          e.g 'gender'
      doc: >
        Returns `true` if the blueprint contains the specified attribute
    # --------------------------------------
    - def_name: get_attribute
      return: carla.ActorAttribute 
      params:
      - param_name: id
        type: str
      doc: >
        Returns the current actor attribute through its id
      Return: carla.ActorAttribute
    # --------------------------------------
    - def_name: set_attribute
      params: 
      - param_name: id
        type: str
        doc: >
    # --------------------------------------
      - param_name: value
        type: str
        doc: >
      doc: >
        Sets an existing attribute to the actor's blueprint
      note: >
        Attribute can only be set or changed if it is modifiable
    # --------------------------------------
    - def_name: __len__
      doc: >
    # --------------------------------------
    - def_name: __iter__
      doc: >
    # --------------------------------------
    - def_name: __str__
      doc: >
    # --------------------------------------
    - def_name: __iter__
      doc: >
        Allows iteration within this class' attributes. 
    # --------------------------------------
    - def_name: __len__
      doc: >
        Returns the amount of attributes for this blueprint. 
    # --------------------------------------
    - def_name: __str__
    # --------------------------------------

  - class_name: BlueprintLibrary
    # - DESCRIPTION ------------------------
    doc: >
      Class that provides access to [blueprints](../bp_library/).
    # - METHODS ----------------------------
    methods:
<<<<<<< HEAD
    - def_name: find
=======
    - def_name: filter
      params:
      - param_name: wildcard_pattern
        type: str
      doc: >
        Filters a list of blueprints matching the `wildcard_pattern` against the id and tags of every blueprint contained in this library and returns the result as a new one. Matching follows [fnmatch](https://docs.python.org/2/library/fnmatch.html) standard.
      return: carla.BlueprintLibrary
    # --------------------------------------
    - def_name: find
      params:
      - param_name: id
        type: str
      return: carla.ActorBlueprint
      doc: >
        Returns the blueprint corresponding to that identifier. 
    # --------------------------------------
    - def_name: __getitem__
>>>>>>> 4dc4cb81853670d83ee067ae747c8c851926dacd
      params:
      - param_name: id
        type: str
      return: carla.ActorBlueprint
      doc: >
<<<<<<< HEAD
        Returns a carla.ActorBlueprint through its id
    # --------------------------------------
    - def_name: filter
      params:
      - param_name: wildcard_pattern
        type: str
      doc: >
        Filters a list of ActorBlueprint with id or tags matching wildcard_pattern.
        The pattern is matched against each blueprint's id and tags.
      note: > 
        The wildcard_pattern follows Unix shell-style wildcards (fnmatch).
      return: carla.BlueprintLibrary
    # --------------------------------------
    - def_name: __getitem__
      params:
      - param_name: pos
        type: int
      return: carla.ActorBlueprint
      doc: >
    # --------------------------------------
    - def_name: __len__
      doc: >
    # --------------------------------------
    - def_name: __iter__
      doc: >
    # --------------------------------------
    - def_name: __str__
      doc: >
    # --------------------------------------
=======
        Returns the blueprint stored in `pos` position inside the data structure containing them. 
    # --------------------------------------
    - def_name: __iter__
      doc: >
        Method that allows iteration within the blueprints provided. 
    # --------------------------------------
    - def_name: __len__
      return: int 
      doc: >
        Returns the amount of blueprints comprising the library. 
    # --------------------------------------
    - def_name: __str__
      return: string 
      doc: >
        Parses the identifiers for every blueprint to string. 
    # --------------------------------------
>>>>>>> 4dc4cb81853670d83ee067ae747c8c851926dacd
...
